// <auto-generated />
using System;
using HistorySiteIdentity.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HistorySiteIdentity.Data.Migrations
{
    [DbContext(typeof(ForceDBContext))]
    [Migration("20200505100711_ForAdress")]
    partial class ForAdress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HistorySiteIdentity.Models.Army", b =>
                {
                    b.Property<int>("ArmyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BattleFrontId")
                        .HasColumnType("int");

                    b.Property<string>("CoordX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatesXY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("ArmyId");

                    b.HasIndex("BattleFrontId");

                    b.HasIndex("WeekId");

                    b.ToTable("Armies");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Battalion", b =>
                {
                    b.Property<int>("BattalionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("RegimentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("BattalionId");

                    b.HasIndex("RegimentId");

                    b.HasIndex("WeekId");

                    b.ToTable("Battalions");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.BattleFront", b =>
                {
                    b.Property<int>("BattleFrontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("BattleFrontId");

                    b.HasIndex("WeekId");

                    b.ToTable("BattleFronts");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Brigade", b =>
                {
                    b.Property<int>("BrigadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("BrigadeId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("WeekId");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Commander", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArmyId")
                        .HasColumnType("int");

                    b.Property<int?>("BattalionId")
                        .HasColumnType("int");

                    b.Property<int?>("BattleFrontId")
                        .HasColumnType("int");

                    b.Property<int?>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<int?>("CorpsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegimentId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ArmyId");

                    b.HasIndex("BattalionId");

                    b.HasIndex("BattleFrontId");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("CorpsId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("RegimentId");

                    b.HasIndex("WeekId");

                    b.ToTable("Commander");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Corps", b =>
                {
                    b.Property<int>("CorpsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArmyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("CorpsId");

                    b.HasIndex("ArmyId");

                    b.HasIndex("WeekId");

                    b.ToTable("Corpss");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorpsId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("DivisionId");

                    b.HasIndex("CorpsId");

                    b.HasIndex("WeekId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Regiment", b =>
                {
                    b.Property<int>("RegimentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrenght")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("RegimentId");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("WeekId");

                    b.ToTable("Regiments");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Week", b =>
                {
                    b.Property<int>("WeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("WeekId");

                    b.ToTable("Week");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Army", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.BattleFront", "BattleFront")
                        .WithMany("Armies")
                        .HasForeignKey("BattleFrontId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("Armies")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Battalion", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Regiment", "Regiment")
                        .WithMany("Battalions")
                        .HasForeignKey("RegimentId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("Battalions")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.BattleFront", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("BattleFronts")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Brigade", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Division", "Division")
                        .WithMany("Brigades")
                        .HasForeignKey("DivisionId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("Brigades")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Commander", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Army", "Army")
                        .WithMany("Commanders")
                        .HasForeignKey("ArmyId");

                    b.HasOne("HistorySiteIdentity.Models.Battalion", "Battalion")
                        .WithMany("Commanders")
                        .HasForeignKey("BattalionId");

                    b.HasOne("HistorySiteIdentity.Models.BattleFront", "BattleFront")
                        .WithMany("Commanders")
                        .HasForeignKey("BattleFrontId");

                    b.HasOne("HistorySiteIdentity.Models.Brigade", "Brigade")
                        .WithMany("Commanders")
                        .HasForeignKey("BrigadeId");

                    b.HasOne("HistorySiteIdentity.Models.Corps", "Corps")
                        .WithMany("Commanders")
                        .HasForeignKey("CorpsId");

                    b.HasOne("HistorySiteIdentity.Models.Division", "Division")
                        .WithMany("Commanders")
                        .HasForeignKey("DivisionId");

                    b.HasOne("HistorySiteIdentity.Models.Regiment", "Regiment")
                        .WithMany("Commanders")
                        .HasForeignKey("RegimentId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany()
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Corps", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Army", "Army")
                        .WithMany("Corps")
                        .HasForeignKey("ArmyId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("Corpss")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Division", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Corps", "Corps")
                        .WithMany("Divisions")
                        .HasForeignKey("CorpsId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("Divisions")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("HistorySiteIdentity.Models.Regiment", b =>
                {
                    b.HasOne("HistorySiteIdentity.Models.Brigade", "Brigade")
                        .WithMany("Regiments")
                        .HasForeignKey("BrigadeId");

                    b.HasOne("HistorySiteIdentity.Models.Week", "Week")
                        .WithMany("Regiments")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
